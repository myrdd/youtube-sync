#!/bin/bash

# Copyright 2016-2019 PotcFdk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ -f "$0.preupdate" ]; then
	rm "$0.preupdate"
fi

function selfupdate {
	echo "Updating YoutubeDL..."
	youtube-dl -U
	echo "Updating repository..."
	cp "$0" "$0.preupdate" && chmod -x "$0.preupdate" && git checkout -- "$0" && git pull -p
	echo "Updated."
	rm "$0.preupdate"
	exit
}

function update_metadata {
	ID="$1"
	titlefile="$2"
	descfile="$3"

	echo -n "Updating metadata: $ID..."
	echo -n " [title"

	TITLE=$(youtube-dl --get-filename -o '%(title)s' -- "$ID");
	if [ -z "$TITLE" ]; then
		echo -n ":Error] Empty title. Video might be down. We'll keep the old link."
	else
		echo -n ":OK]"
		echo -n "$TITLE" > $titlefile
		echo -n " [desc"
		DESCRIPTION=$(youtube-dl --get-description -- "$ID");
		if [ -n "$DESCRIPTION" ]; then
			echo -n ":OK]"
			echo "$DESCRIPTION" > $descfile
		else
			echo -n ":N/A]"
		fi
	fi
	echo
}

function update_all_metadata {
	name="$1"
	domissing="$2"

	num_total=$(find "SYNC/$name/ID/" -maxdepth 1 -name "*.mkv" | wc -l)
	num_current=1

	for filen in SYNC/$name/ID/*.mkv; do
		if [ -f "$filen" ]; then
			if [[ "$filen" =~ /([^/]+)\.mkv$ ]]; then
				ID=${BASH_REMATCH[1]};
				titlefile="SYNC/$name/META/$ID.title"
				descfile="SYNC/$name/META/$ID.description"
				if [ "$domissing" = "missing-only" \
						-a -f $titlefile -a -f $descfile ]; then
					echo "Skipping known meta for $ID"
				else
					echo -n "($num_current/$num_total) ";
					update_metadata "$ID" "$titlefile" "$descfile"
				fi
			fi
		fi
		num_current=$((num_current+1))
	done
}

function set_default_option {
	test -e "SYNC/$1/META/$2" || echo -n "$3" > "SYNC/$1/META/$2"
}

function set_default_options {
	set_default_option "$1" "format" "bestvideo+bestaudio/best"
}

function sync {
	if [ -n "$2" ]; then
		URL="$2"
		mkdir -p "SYNC/$1/META"
		echo -n "$URL" > "SYNC/$1/META/source"
		set_default_options "$1"
		echo "Set up profile. You can run 'update' on this profile now."
	elif [ -f "SYNC/$1/META/source" ]; then
		read -r URL < "SYNC/$1/META/source"
		if [ -f "SYNC/$1/META/cookies.txt" ]; then
			COOKIE=(--cookies "SYNC/$1/META/cookies.txt")
		elif [ -f "cookies.txt" ]; then
			COOKIE=(--cookies cookies.txt)
		else
			COOKIE=()
		fi
		set_default_options "$1"
		youtube-dl -i -f "$(cat "SYNC/$1/META/format")" "${COOKIE[@]}" --all-subs --embed-subs --merge-output-format mkv -o "SYNC/$1/ID/%(id)s.%(ext)s" "$URL"
	else
		>&2 echo "Fatal error: Missing URL in profile '$1'."
		exit 1
	fi
}

function update_symlinks {
	mkdir -p "SYNC/$1/LINK"

	if [ ! -d "SYNC/$1/META" ]; then
		>&1 echo "Error: /META directory doesn't exist for $1. Have you run the update command?"
		exit 1
	fi

	rm SYNC/$1/LINK/*.mkv

	for titlepath in SYNC/$1/META/*.title; do
		read -r TITLE < "$titlepath"
		if [[ "$titlepath" =~ /([^/]+)\.title$ ]]; then
			ID=${BASH_REMATCH[1]};
			echo "Creating link: $ID -> $TITLE.$ID.mkv"
			ln -s "../ID/$ID.mkv" "SYNC/$1/LINK/$TITLE.$ID.mkv"
		fi
	done
}

function update {
	sync "$1"
	update_all_metadata "$1" "missing-only"
	update_symlinks "$1"
}

function update_old {
	sync "$1"
	update_all_metadata "$1"
	update_symlinks "$1"
}

function update_all {
	for profile in SYNC/*; do
		sync "${profile##*/}"
		update_all_metadata "${profile##*/}" "missing-only"
		update_symlinks "${profile##*/}"
	done
}

function list {
	for profile in SYNC/*; do
		num_total=$(find "$profile/ID/" -maxdepth 1 -name "*.mkv" | wc -l)
		size_total=$(du -hs "$profile/ID" | cut -f1)
		echo "$profile ($num_total objects, $size_total)"
	done
}

#

function showHelp {
	if [ "$1" = "help" ]; then
		echo -e "Command: help - usage: $0 help <command>\n"
		echo "Shows help for a given command or a list of available commands if no command is specified."
	elif [ "$1" = "list" ]; then
		echo -e "Command: list - usage: $0 list\n"
		echo "List all existing profiles."
	elif [ "$1" = "setup" ]; then
		echo -e "Command: setup - usage: $0 setup <profilename> <URL>\n"
		echo "Sets up a new profile with the name <profilename> which will be saved to SYNC/<profilename> and will be linked to <URL>. After setting up a profile, you will be able to sync it using the update command."
	elif [ "$1" = "update" ]; then
		echo -e "Command: update - usage: $0 update <profilename>\n"
		echo "Updates a profile by fetching all new content along with its metadata."
	elif [ "$1" = "update-old" ]; then
		echo -e "Command: update-old - usage: $0 update-old <profilename>\n"
		echo "Updates a profile by fetching all new content along with its metadata."
		echo "In addition to that, this also updates the metadata of all existing content."
	elif [ "$1" = "update-all" ]; then
		echo -e "Command: update-all - usage: $0 update-all <profilename>\n"
		echo "Updates all profiles by fetching all new content along with its metadata."
	elif [ "$1" = "symlinks" ]; then
		echo -e "Command: symlinks - usage: $0 symlinks <profilename>\n"
		echo "Clear all symlinks in a profile and recreates them using the cached metadata."
	elif [ "$1" = "selfupdate" ]; then
		echo -e "Command: selfupdate - usage: $0 selfupdate\n"
		echo "Updates youtube-sync using git and triggers a youtube-dl self-update."
	else
		echo -e "Available commands:\n"
		echo "$0 help       - Shows this help."
		echo "$0 setup      - Setup content syncing profile."
		echo "$0 list       - List content syncing profiles."
		echo "$0 update     - Fetch new content for a profile."
		echo "$0 update-old - Like 'update', but update all old metadata."
		echo "$0 update-all - Run 'update' on all profiles."
		echo "$0 symlinks   - Recreate all symlinks for a profile."
		echo "$0 selfupdate - Update youtube-sync and youtube-dl."
		echo -e "\nRun $0 help <command> to show more details and usage help."
	fi
}

if [ -z "$1" ]; then
	>&2 echo "Missing command."
	showHelp
	exit 1
elif [ "$1" = "help" ]; then
	showHelp "${@:2}"
elif [ "$1" = "list" ]; then
	list
elif [ "$1" = "setup" ]; then
	if [ -z "$2" ]; then
		>&2 echo "Missing sync directory name."
		exit 1
	elif [ -z "$3" ]; then
		>&2 echo "Missing URL."
		exit 1
	elif [[ "$3" =~ ^https?:// ]]; then
		sync "${@:2}"
	else
		>&2 echo "Invalid URL."
		exit 1
	fi
elif [ "$1" = "update" ]; then
	if [ -z "$2" ]; then
		>&2 echo "Missing sync directory name."
		exit 1
	else
		update "${@:2}"
	fi
elif [ "$1" = "update-old" ]; then
	if [ -z "$2" ]; then
		>&2 echo "Missing sync directory name."
		exit 1
	else
		update_old "${@:2}"
	fi
elif [ "$1" = "update-all" ]; then
	update_all
elif [ "$1" = "symlinks" ]; then
	if [ -z "$2" ]; then
		>&2 echo "Missing sync directory name."
		exit 1
	else
		update_symlinks "$2"
	fi
elif [ "$1" = "selfupdate" ]; then
	selfupdate
else
	>&2 echo "Invalid/Unknown command."
	showHelp
	exit 1
fi
